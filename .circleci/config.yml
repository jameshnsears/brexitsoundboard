version: 2
jobs:
  "cli android qa":
    working_directory: ~/code
    docker:
      - image: circleci/android:api-26
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout

      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      - run: yes | sdkmanager --licenses || exit 0
      - run: yes | sdkmanager --update || exit 0

      - run:
          name: prep gradle env.
          command: sudo chmod +x ./gradlew

      - run:
          name: download android dependencies
          command: ./gradlew androidDependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      - run:
          name: lint
          command: ./gradlew lint

      - run:
          name: findbugs
          command: ./gradlew findbugs

      - run:
          name: pmd
          command: ./gradlew pmd

      - run:
          name: checkstyle
          command: ./gradlew checkstyle

      - run:
          name: produce unit test report
          command: ./gradlew test

      - run:
          name: assemble apk's for firebase
          command: |
            ./gradlew :app:assembleDebug
            ./gradlew :app:assembleDebugAndroidTest

      - run:
          name: prep firebase env.
          command: |
            wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-228.0.0-linux-x86_64.tar.gz
            tar -xvzf google-cloud-sdk-228.0.0-linux-x86_64.tar.gz
            source google-cloud-sdk/path.bash.inc

#
# two ways to generate service account key / role - for circleci command usage:
#

# visit: https://console.firebase.google.com/
# create: brexit-soundboard-01 project
# Project Overview > Project Settings > Service accounts > Generate key
# Visit Google Cloud Platform > IAM & admin > IAM
#   find account with correct key id from generated key, and give it:
#     Role > Firebase Admin Owner

# OR

# visit: https://console.developers.google.com/apis/dashboard
# select: brexit-soundboard project

#   APIs & Services:
#     Library, enable:
#       Cloud Testing API
#       Cloud Tool Results API
#       Service Management API

#   IAM & admin> Service accounts > Create Service Account
#     Name + Description: circleci-brexitsoundboard
#     Create
#       Role > Editor
#       Role > Firebase Admin Owner

#   IAM & admin> Service accounts
#     Create Key > JSON

# store JSON in circleCI env var. GCP (don't paste last trailing newline)
# GCP=`cat key.json`
# echo $GCP

# gcloud auth login
# gcloud config set project brexit-soundboard-01

      - run:
          name: run test lab
          command: |
            echo ${GCP} > ${HOME}/gcp.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp.json
            gcloud config set project brexit-soundboard-01
            # gcloud firebase test android models list
            gcloud firebase test android run \
              --type instrumentation \
              --app app/build/outputs/apk/debug/app-debug.apk \
              --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
              --device model=Nexus6P,version=27,locale=en,orientation=portrait \
              --timeout 10m \
              --directories-to-pull /sdcard \
              --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" \
              &> results.txt

      - run:
          name: grep for Passed
          command: |
            cat results.txt
            if grep -q Failed results.txt; then
                false
            else
                true
            fi

      - run:
          name: retreive coverage
          command: |
            export GCS_BUCKET=`python3 bin/firebase_spark_test_lab_bucket.py`
            gsutil cp $GCS_BUCKET app/build/jacoco

      - run:
          name: produce combined unit test and expresso coverage report
          command: |
            set -x
            ./gradlew jacocoMerge
            ./gradlew jacocoReport

      - run:
          name: publish to codevoc
          command: bash <(curl -s https://codecov.io/bash)

      - run:
          name: publish to codacy
          command: |
            set -x
            wget https://github.com/codacy/codacy-coverage-reporter/releases/download/4.0.5/codacy-coverage-reporter-4.0.5-assembly.jar
            java -jar codacy-coverage-reporter-4.0.5-assembly.jar report -l Java -r app/build/reports/jacoco/jacocoReport/jacocoReport.xml

      - run:
          name: publish to sonarcloud
          command: |
            set -x
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
            unzip sonar-scanner-cli-3.2.0.1227-linux.zip
            export PATH=sonar-scanner-3.2.0.1227-linux/bin:$PATH
            sonar-scanner \
              -Dsonar.projectKey=jameshnsears_brexitsoundboard \
              -Dsonar.organization=jameshnsears-github \
              -Dproject.settings=sonar-project.properties \
              -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONARCLOUD_TOKEN

workflows:
  version: 2
  commit:
    jobs:
      - "cli android qa"